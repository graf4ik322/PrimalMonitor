#!/bin/bash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
TELEGRAM_BOT_TOKEN="8336743350:AAGmtaR9_LIv9yE9c874cKDnfFmL_yHSpJg"
TELEGRAM_CHAT_ID="-4919582560"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫
send_to_telegram() {
    local message="$1"
    
    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–º–µ—Å—Ç–æ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
        "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        --data-urlencode "chat_id=$TELEGRAM_CHAT_ID" \
        --data-urlencode "text=$message")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º HTTP —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
    body=$(echo "$response" | sed -e 's/HTTPSTATUS:.*//g')
    
    echo "HTTP Status: $http_code"
    echo "Response: $body"
    
    if [ "$http_code" -eq 200 ]; then
        echo "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
        return 0
    else
        echo "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!"
        return 1
    fi
}

# –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
test_telegram_connection() {
    echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API..."
    
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
        "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/getMe")
    
    http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
    body=$(echo "$response" | sed -e 's/HTTPSTATUS:.*//g')
    
    echo "HTTP Status: $http_code"
    echo "Bot info: $body"
    
    if [ "$http_code" -eq 200 ]; then
        echo "‚úÖ –ë–æ—Ç —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π"
    else
        echo "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞"
        exit 1
    fi
}

# –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
test_chat_access() {
    echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É..."
    
    test_message="ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
        "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "chat_id=$TELEGRAM_CHAT_ID" \
        -d "text=$test_message")
    
    http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
    body=$(echo "$response" | sed -e 's/HTTPSTATUS:.*//g')
    
    echo "HTTP Status: $http_code"
    echo "Response: $body"
    
    if [ "$http_code" -eq 200 ]; then
        echo "‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –µ—Å—Ç—å"
    else
        echo "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è CPU usage –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
get_cpu_usage() {
    # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ /proc/stat —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    if [ -f /proc/stat ]; then
        # –ß–∏—Ç–∞–µ–º –¥–≤–∞ —Å–Ω–∏–º–∫–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É
        read cpu1 < <(grep '^cpu ' /proc/stat)
        sleep 1
        read cpu2 < <(grep '^cpu ' /proc/stat)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        cpu1_arr=($cpu1)
        cpu2_arr=($cpu2)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç–∏
        user_diff=$((${cpu2_arr[1]} - ${cpu1_arr[1]}))
        nice_diff=$((${cpu2_arr[2]} - ${cpu1_arr[2]}))
        system_diff=$((${cpu2_arr[3]} - ${cpu1_arr[3]}))
        idle_diff=$((${cpu2_arr[4]} - ${cpu1_arr[4]}))
        iowait_diff=$((${cpu2_arr[5]} - ${cpu1_arr[5]}))
        irq_diff=$((${cpu2_arr[6]} - ${cpu1_arr[6]}))
        softirq_diff=$((${cpu2_arr[7]} - ${cpu1_arr[7]}))
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è
        total_diff=$((user_diff + nice_diff + system_diff + idle_diff + iowait_diff + irq_diff + softirq_diff))
        used_diff=$((total_diff - idle_diff))
        
        if [ $total_diff -gt 0 ]; then
            cpu_usage=$(echo "scale=1; $used_diff * 100 / $total_diff" | bc)
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –¥–æ–±–∞–≤–ª—è–µ–º 0 –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if [[ $cpu_usage == .* ]]; then
                cpu_usage="0$cpu_usage"
            fi
            echo "$cpu_usage"
            return 0
        fi
    fi
    
    # –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ vmstat
    if command -v vmstat >/dev/null 2>&1; then
        # vmstat –¥–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –º–µ–Ω–µ–µ –Ω–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É
        idle=$(vmstat 1 2 | tail -1 | awk '{print $15}')
        if [ -n "$idle" ] && [ "$idle" -ge 0 ] && [ "$idle" -le 100 ]; then
            cpu_usage=$(echo "100 - $idle" | bc)
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –¥–æ–±–∞–≤–ª—è–µ–º 0 –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if [[ $cpu_usage == .* ]]; then
                cpu_usage="0$cpu_usage"
            fi
            echo "$cpu_usage"
            return 0
        fi
    fi
    
    # –ú–µ—Ç–æ–¥ 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ sar (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if command -v sar >/dev/null 2>&1; then
        idle=$(sar -u 1 1 | grep "Average" | awk '{print $8}')
        if [ -n "$idle" ]; then
            cpu_usage=$(echo "100 - $idle" | bc)
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –¥–æ–±–∞–≤–ª—è–µ–º 0 –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if [[ $cpu_usage == .* ]]; then
                cpu_usage="0$cpu_usage"
            fi
            echo "$cpu_usage"
            return 0
        fi
    fi
    
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º N/A
    echo "N/A"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Load Average —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
get_load_average() {
    if [ -f /proc/loadavg ]; then
        read load1 load5 load15 processes last_pid < /proc/loadavg
        cores=$(nproc)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–¥–µ—Ä
        load_percent=$(echo "scale=1; $load1 * 100 / $cores" | bc)
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –¥–æ–±–∞–≤–ª—è–µ–º 0 –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if [[ $load_percent == .* ]]; then
            load_percent="0$load_percent"
        fi
        
        echo "$load1 $load5 $load15 ($load_percent%)"
    else
        echo "N/A"
    fi
}

# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ
collect_system_data() {
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º printf –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    printf "üñ•Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã\n"
    printf "üìÖ %s\n" "$(date '+%Y-%m-%d %H:%M:%S')"

    # –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞
    hostname="AdminPanel #AdminPanel"
    printf "üè∑Ô∏è –°–µ—Ä–≤–µ—Ä: %s\n\n" "$hostname"

    # 1. CPU
    printf "‚ö° CPU Usage:\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä
    cores=$(nproc)
    printf "‚îú CPU Cores: %s\n" "$cores"
    
    # Load Average —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
    load_info=$(get_load_average)
    printf "‚îú Load Average: %s\n" "$load_info"
    
    # –ü–æ–ª—É—á–∞–µ–º CPU usage –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
    cpu_usage=$(get_cpu_usage)
    printf "‚îî Current CPU Usage: %s%%\n" "$cpu_usage"
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏
    if [ "$cpu_usage" != "N/A" ]; then
        if (( $(echo "$cpu_usage > 85" | bc -l 2>/dev/null || echo 0) )); then
            printf "  ‚ö†Ô∏è CPU Warning: High load (>85%%)\n"
        elif (( $(echo "$cpu_usage > 70" | bc -l 2>/dev/null || echo 0) )); then
            printf "  ‚ö° CPU Notice: Moderate load (>70%%)\n"
        else
            printf "  ‚úÖ CPU Reserve: OK\n"
        fi
    else
        printf "  ‚ö†Ô∏è CPU data unavailable\n"
    fi
    printf "\n"

    # 2. RAM
    printf "üíæ Memory Usage:\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
    mem_info=$(free -h | awk '/^Mem:/ {
        total=$2; used=$3; free=$4; available=$7
        if (available == "") available = free
        printf "‚îú Total: %s, Used: %s, Available: %s\n", total, used, available
    }')
    printf "%s" "$mem_info"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º available –ø–∞–º—è—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    mem_percent=$(free | awk '/^Mem:/ {
        if ($7 != "") {
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ available, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            printf "%.1f", ($2-$7)/$2 * 100
        } else {
            # –ï—Å–ª–∏ –Ω–µ—Ç available, –∏—Å–ø–æ–ª—å–∑—É–µ–º used
            printf "%.1f", $3/$2 * 100
        }
    }')
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –¥–æ–±–∞–≤–ª—è–µ–º 0 –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [[ $mem_percent == .* ]]; then
        mem_percent="0$mem_percent"
    fi
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º available –ø–∞–º—è—Ç—å
    available_mem=$(free -h | awk '/^Mem:/ {print ($7 != "") ? $7 : $4}')
    printf "‚îî Memory Usage: %s%% (Available: %s)\n" "$mem_percent" "$available_mem"
    
    if (( $(echo "$mem_percent > 85" | bc -l 2>/dev/null || echo 0) )); then
        printf "  ‚ö†Ô∏è Memory Warning: High usage (>85%%)\n"
    elif (( $(echo "$mem_percent > 70" | bc -l 2>/dev/null || echo 0) )); then
        printf "  ‚ö° Memory Notice: Moderate usage (>70%%)\n"
    else
        printf "  ‚úÖ Memory Reserve: OK\n"
    fi
    printf "\n"
    
    # 3. Disk
    printf "üíø Disk Usage:\n"
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–∏—Å–∫–æ–≤
    df -h | grep -E '^/dev/' | awk '{printf "‚îú %s: %s/%s (%s)\n", $1, $3, $2, $5}'
    
    disk_usage=$(df / | awk 'NR==2 {print $5}' | tr -d '%')
    printf "‚îî Root Usage: %s%%\n" "$disk_usage"
    
    if [ "$disk_usage" -gt 85 ]; then
        printf "  ‚ö†Ô∏è Disk Warning: Root filesystem >85%%\n"
    elif [ "$disk_usage" -gt 70 ]; then
        printf "  ‚ö° Disk Notice: Root filesystem >70%%\n"
    else
        printf "  ‚úÖ Disk Reserve: OK\n"
    fi
    printf "\n"

    # 4. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    printf "üìä System Status:\n"
    
    warnings=0
    notices=0
    
    if [ "$cpu_usage" != "N/A" ]; then
        if (( $(echo "$cpu_usage > 85" | bc -l 2>/dev/null || echo 0) )); then
            ((warnings++))
        elif (( $(echo "$cpu_usage > 70" | bc -l 2>/dev/null || echo 0) )); then
            ((notices++))
        fi
    fi
    
    if (( $(echo "$mem_percent > 85" | bc -l 2>/dev/null || echo 0) )); then
        ((warnings++))
    elif (( $(echo "$mem_percent > 70" | bc -l 2>/dev/null || echo 0) )); then
        ((notices++))
    fi
    
    if [ "$disk_usage" -gt 85 ]; then
        ((warnings++))
    elif [ "$disk_usage" -gt 70 ]; then
        ((notices++))
    fi
    
    if [ $warnings -gt 0 ]; then
        printf "‚ö†Ô∏è Warning: System under high load (%d critical issues)\n" "$warnings"
    elif [ $notices -gt 0 ]; then
        printf "‚ö° Notice: Moderate system load (%d minor issues)\n" "$notices"
    else
        printf "‚úÖ All systems operating normally"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "=== –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ==="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥
    for cmd in curl bc; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            echo "‚ùå –ö–æ–º–∞–Ω–¥–∞ '$cmd' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç."
            exit 1
        fi
    done
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä --test, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã
    if [ "$1" = "--test" ]; then
        test_telegram_connection
        test_chat_access
        echo "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        exit 0
    fi
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file=$(mktemp)
    collect_system_data > "$temp_file"
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    cat "$temp_file"
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    system_data=$(cat "$temp_file")
    rm "$temp_file"
    
    echo ""
    echo "=== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ==="
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if send_to_telegram "$system_data"; then
        echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"